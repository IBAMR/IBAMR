## ---------------------------------------------------------------------
##
## Copyright (c) 2021 - 2025 by the IBAMR developers
## All rights reserved.
##
## This file is part of IBAMR.
##
## IBAMR is free software and is distributed under the 3-clause BSD
## license. The full text of the license can be found in the file
## COPYRIGHT at the top level directory of IBAMR.
##
## ---------------------------------------------------------------------

name: Pull/push
on:
  # Trigger the workflow on push or pull request,
  # but only when targeting the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # build IBAMR with CMake and run tests
  build_ibamr_cmake_016:
    runs-on: ubuntu-latest
    name: Build IBAMR and run tests (0.16 dependencies ${{ matrix.name }})
    strategy:
      matrix:
        include:
          - name: "Arch Linux 2025, with libMesh"
            key: "arch-cmake-libmesh"
            cmake_flags: "-DLIBMESH_ROOT=/libmesh -DLIBMESH_METHOD=devel"
            cxx_flags: "-ftrivial-auto-var-init=pattern -fuse-ld=mold -D_FORTIFY_SOURCE=3"
            os: "archlinux"
          - name: "Arch Linux 2025, without libMesh"
            key: "arch-cmake-no-libmesh"
            cmake_flags: ""
            cxx_flags: "-ftrivial-auto-var-init=pattern -fuse-ld=mold -D_FORTIFY_SOURCE=3"
            os: "archlinux"
          - name: "Ubuntu 20.04, with libMesh"
            key: "ubuntu-cmake-libmesh"
            cmake_flags: "-DLIBMESH_ROOT=/libmesh -DLIBMESH_METHOD=OPT"
            cxx_flags: ""
            os: "ubuntu"

    container:
      image: 'docker://wellsd2/ibamr:ibamr-0.16-dependencies-${{ matrix.os }}'
    env:
      CCACHE_MAXSIZE: 250M
      CCACHE_DIR: /compilationcache
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        id: git
      - name: Verify that clang-format was run
        id: format
        run: |
          git config --global --add safe.directory '*'
          ./scripts/formatting/download-clang-format
          ./scripts/formatting/check-indentation
      - name: Populate ccache
        uses: actions/cache@v4
        env:
          cache-name: ccache
        id: cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ibamr-${{ matrix.key }}-feature-cache-${{ github.ref_name }}
          restore-keys: |
            ibamr-${{ matrix.key }}-feature-cache-${{ github.ref_name }}
            ibamr-${{ matrix.key }}-master-cache-
            ibamr-${{ matrix.key }}-
            ibamr-
      - name: Configure IBAMR
        id: configure
        run: |
          mkdir build
          cd build
          FLAGS="${{ matrix.cmake_flags }} -DHYPRE_ROOT=/petsc/ -DPETSC_ROOT=/petsc/ -DSAMRAI_ROOT=/samrai"
          # add a subshell to ensure flags are passed as separate arguments
          cmake $(echo "$FLAGS") -DNUMDIFF_ROOT=/numdiff/ \
                -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER="$(which ccache)" \
                -DCMAKE_CXX_FLAGS="-O1 -Wall -Wextra -Wpedantic -Werror -Wno-deprecated-declarations -D_GLIBCXX_ASSERTIONS ${{ matrix.cxx_flags }}" \
                -DCMAKE_Fortran_FLAGS="-O3 -Wall -Wextra -Wpedantic -Werror -Wno-unused-parameter -Wno-compare-reals" \
                ../
          ccache --show-stats
      - name: Compile IBAMR
        id: build-library
        run: |
          cd build
          ninja -j4
          ccache --show-stats
      - name: Compile IBAMR tests
        id: build-tests
        run: |
          cd build
          ninja -j4 tests
          ccache --show-stats
      - name: Test IBAMR
        id: test
        run: |
          cd build
          runuser -u build -- ./attest --verbose --test-timeout=120 -j4 -E 'mpirun=[3-9]|explicit_ex2_3d|explicit_ex5_3d|explicit_ex8_2d|nwt_cylinder|cib_double_shell.in|cib_double_shell.cholesky.in|poiseuille_flow'
          ccache --show-stats
      - name: Install IBAMR
        id: install
        run: |
          cd build
          ninja install
      - name: compile a sample project with an uninstalled IBAMR
        id: sampleproject1
        run: |
          mkdir sample-project
          cd sample-project
          cp ../.github/project-template/CMakeLists.txt ./
          cp ../.github/project-template/project.cpp ./
          cmake -DIBAMR_ROOT=/build/ibamr .
          make
          ./project
      - name: compile a sample project with an installed IBAMR
        id: sampleproject2
        run: |
          mkdir sample-project2
          cd sample-project2
          cp ../.github/project-template/CMakeLists.txt ./
          cp ../.github/project-template/project.cpp ./
          cmake -DIBAMR_ROOT=/ibamr .
          make
          ./project

  # build IBAMR with autotools
  build_ibamr_archlinux_016_autotools:
    runs-on: ubuntu-latest
    name: Build IBAMR and run tests (autotools, 0.16 dependencies, Arch Linux 2025)
    container:
      image: 'docker://wellsd2/ibamr:ibamr-0.16-dependencies-archlinux'
    env:
      CCACHE_MAXSIZE: 250M
      CCACHE_DIR: /compilationcache
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        id: git
      - name: Verify that clang-format was run
        id: format
        run: |
          git config --global --add safe.directory '*'
          ./scripts/formatting/download-clang-format
          ./scripts/formatting/check-indentation
      - name: Populate ccache
        uses: actions/cache@v4
        env:
          cache-name: ccache
        id: cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ibamr-arch-autotools-libmesh-feature-cache-${{ github.ref_name }}
          restore-keys: |
            ibamr-arch-autotools-libmesh-feature-cache-${{ github.ref_name }}
            ibamr-arch-autotools-libmesh-master-cache-
            ibamr-arch-autotools-libmesh-
            ibamr-
      - name: Configure IBAMR
        id: configure
        run: |
          export CC="ccache $(which mpicc)"
          export CXX="ccache $(which mpic++)"
          # we are just compiling things so go for speed
          export CFLAGS="-O0"
          export CXXFLAGS="-O0"
          export FFLAGS="-O0"
          mkdir build
          cd build
          ../configure PETSC_DIR=/petsc/ --with-samrai=/samrai \
          --enable-libmesh --with-libmesh=/libmesh --with-libmesh-method=devel
          ccache --show-stats
      - name: Compile IBAMR
        id: build-library
        run: |
          cd build
          make -j4
          ccache --show-stats
      - name: Compile IBAMR tests
        id: build-tests
        run: |
          cd build
          make -j4 tests
          ccache --show-stats
      - name: Compile IBAMR examples
        id: build-examples
        run: |
          cd build
          make -j4 examples
          ccache --show-stats
