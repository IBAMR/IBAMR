## ---------------------------------------------------------------------
##
## Copyright (c) 2023 - 2023 by the IBAMR developers
## All rights reserved.
##
## This file is part of IBAMR.
##
## IBAMR is free software and is distributed under the 3-clause BSD
## license. The full text of the license can be found in the file
## COPYRIGHT at the top level directory of IBAMR.
##
## ---------------------------------------------------------------------

name: push
on:
  # things to do when we push to master
  push:
    branches:
      - master
permissions:
  contents: write
jobs:
  # doxygen
  deploy_documentation:
    runs-on: ubuntu-latest
    name: Compile and deploy doxygen documentation
    env:
      TRAVIS_BUILD_DIR: ${{ github.workspace }}
      DOXYFILE: ${{ github.workspace }}/doc/Doxyfile
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        id: git
      - name: Install dependencies
        id: dependencies
        run: |
          sudo apt update && sudo apt install doxygen doxygen-gui doxygen-doc doxygen-latex graphviz
          doxygen --version
      - name: Clone IBAMR-docs
        uses: actions/checkout@v4
        with:
          repository: IBAMR/IBAMR-docs
          path: IBAMR-docs
          ref: master
      - name: Grab tagfile
        working-directory: ${{ github.workspace }}/doc
        run: wget https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/libstdc++.tag
      - name: Run Doxygen
        working-directory: ${{ github.workspace }}/doc
        run: doxygen $DOXYFILE 2>&1 | tee doxygen.log
      - name: Archive Doxygen Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: doxygen-log
          path: ${{ github.workspace }}/doc/doxygen.log
      - name: Update IBAMR-docs
        run: |
          rm -rf IBAMR-docs/ibamr
          mv doc/html/ibamr IBAMR-docs/ 
      - name: Push to IBAMR-docs
        uses: cpina/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY_DOCS }}
        with:
          source-directory: 'IBAMR-docs'
          destination-github-username: 'IBAMR'
          destination-repository-name: 'IBAMR-docs'
          user-email: 'travis@travis-ci.org'
          target-branch: master

  # build IBAMR with CMake and update the cache
  build_ibamr_cmake_016:
    runs-on: ubuntu-latest
    name: Build IBAMR (0.18 dependencies ${{ matrix.name }})
    strategy:
      matrix:
        include:
          - name: "Arch Linux 2025, with libMesh"
            key: "arch-cmake-libmesh"
            ccache_eviction_flags: "--evict-older-than 1d"
            cmake_flags: "-DLIBMESH_ROOT=/libmesh -DLIBMESH_METHOD=devel"
            cxx_flags: "-ftrivial-auto-var-init=pattern -fuse-ld=mold -D_FORTIFY_SOURCE=3"
            os: "archlinux"
          - name: "Arch Linux 2025, without libMesh"
            key: "arch-cmake-no-libmesh"
            ccache_eviction_flags: "--evict-older-than 1d"
            cmake_flags: ""
            cxx_flags: "-ftrivial-auto-var-init=pattern -fuse-ld=mold -D_FORTIFY_SOURCE=3"
            os: "archlinux"
          - name: "Ubuntu 20.04, with libMesh"
            key: "ubuntu-cmake-libmesh"
            # no-op since this version of ccache does not support --evict-older-than
            ccache_eviction_flags: "--version"
            cmake_flags: "-DLIBMESH_ROOT=/libmesh -DLIBMESH_METHOD=OPT"
            cxx_flags: ""
            os: "ubuntu"

    container:
      image: 'docker://wellsd2/ibamr:ibamr-0.18-dependencies-${{ matrix.os }}'
    env:
      CCACHE_MAXSIZE: 250M
      CCACHE_DIR: /compilationcache
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 4
      - name: Populate ccache
        uses: actions/cache@v4
        env:
          cache-name: ccache
        id: cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ibamr-${{ matrix.key }}-master-cache-${{ github.run_number }}
          restore-keys: |
            ibamr-${{ matrix.key }}-master-cache-
            ibamr-
      - name: Configure IBAMR
        id: configure
        run: |
          mkdir build
          cd build
          FLAGS="${{ matrix.cmake_flags }} -DHYPRE_ROOT=/petsc/ -DPETSC_ROOT=/petsc/ -DSAMRAI_ROOT=/samrai"
          # add a subshell to ensure flags are passed as separate arguments
          cmake $(echo "$FLAGS") -DNUMDIFF_ROOT=/numdiff/ \
                -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER="$(which ccache)" \
                -DCMAKE_CXX_FLAGS="-O1 -Wall -Wextra -Wpedantic -Werror -Wno-deprecated-declarations -D_GLIBCXX_ASSERTIONS ${{ matrix.cxx_flags }}" \
                -DCMAKE_Fortran_FLAGS="-O3 -Wall -Wextra -Wpedantic -Werror -Wno-unused-parameter -Wno-compare-reals" \
                ../
          ccache --show-stats
      - name: Compile IBAMR
        id: build-library
        run: |
          cd build
          ninja -j4
          ccache --show-stats
      - name: Compile IBAMR tests
        id: build-tests
        run: |
          cd build
          ninja -j4 tests
          ccache --show-stats
      - name: clear unused cache entres
        id: clear-old-cache-entries
        run: |
          cd build
          # add a subshell to ensure flags are passed as separate arguments
          ccache $(echo "${{ matrix.ccache_eviction_flags }}")

  # build IBAMR with autotools
  build_ibamr_archlinux_autotools:
    runs-on: ubuntu-latest
    name: Build IBAMR and run tests (autotools, 0.18 dependencies, Arch Linux 2025)
    container:
      image: 'docker://wellsd2/ibamr:ibamr-0.18-dependencies-archlinux'
    env:
      CCACHE_MAXSIZE: 250M
      CCACHE_DIR: /compilationcache
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 4
      - name: Populate ccache
        uses: actions/cache@v4
        env:
          cache-name: ccache
        id: cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ibamr-arch-autotools-libmesh-master-cache-${{ github.ref_name }}
          restore-keys: |
            ibamr-arch-autotools-libmesh-master-cache-
            ibamr-arch-autotools-libmesh-
            ibamr-
      - name: Configure IBAMR
        id: configure
        run: |
          export CC="ccache $(which mpicc)"
          export CXX="ccache $(which mpic++)"
          # we are just compiling things so go for speed
          export CFLAGS="-O0"
          export CXXFLAGS="-O0"
          export FFLAGS="-O0"
          mkdir build
          cd build
          ../configure PETSC_DIR=/petsc/ --with-samrai=/samrai \
          --enable-libmesh --with-libmesh=/libmesh --with-libmesh-method=devel
          ccache --show-stats
      - name: Compile IBAMR
        id: build-library
        run: |
          cd build
          make -j4
          ccache --show-stats
      - name: Compile IBAMR tests
        id: build-tests
        run: |
          cd build
          make -j4 tests
          ccache --show-stats
      - name: Compile IBAMR examples
        id: build-examples
        run: |
          cd build
          make -j4 examples
          ccache --show-stats
      - name: clear unused cache entres
        id: clear-old-cache-entries
        run: |
          cd build
          ccache --evict-older-than 1d
