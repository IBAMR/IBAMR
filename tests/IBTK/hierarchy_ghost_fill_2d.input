REFINE_TYPE = "NONE"//"CONSERVATIVE_LINEAR_REFINE"
USE_CF_INTERPOLATION = TRUE
COARSEN_TYPE = "NONE"//"CONSERVATIVE_COARSEN"
BDRY_INTERP_TYPE = "LINEAR"
CONSISTENT_TYPE_2_BDRY = FALSE

GCW = 1

VERBOSE_OUTPUT = TRUE
TEST_TYPE = 1

Main {
// log file parameters
   log_file_name = "output"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = 2
   viz_dump_dirname            = "viz_advect2d"
   visit_number_procs_per_file = 1

}

N = 16

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0   // lower end of computational domain.
   x_up               = 1, 1   // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels = 2                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4,4           // vector ratio to next coarser level
      level_2 = 2,2
   }

   largest_patch_size {
      level_0 = 2^8, 2^8     // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   1,   1     // smallest patch allowed in hierarchy
                             // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
        level_0 = [( N/8, N/8),(7*N/8 - 1, 7*N / 8 - 1)]
//        level_0 = [( 1, 0), (12, 12)]
	level_1 = [( 4*N/4,4*N/4 ),( 4*3*N/4 - 1,4*N/2 - 1 )],[( 4*N/4,4*N/2 ),( 4*N/2 - 1,4*3*N/4 - 1 )]
   }
}

LoadBalancer {}
