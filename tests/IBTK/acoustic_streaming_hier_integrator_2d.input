// Scalar parameters

LENGTH = 1.0
LAMBDA = 0.0
MU = 1.0
RHO0 = 1.0
OMEGA0 = 1.0  // acoustic_angular_frequency
C0 = 1.0      // speed of sound

N = 128
PERIODIC_BC = 0

FOVelocityInitialConditions {

   function_0 = "0.0"     // ur x-component
   function_1 = "0.0"     // vr y-component

   function_2 = "0.0"   // ui x-component
   function_3 = "0.0"   // vi y-component

}

U1Real = "X_0/L"
V1Real = "X_1/L"
U1Imag = "2*X_0/L"
V1Imag = "2*X_1/L"

FOVelocityExact {

   L = LENGTH

   function_0 = U1Real     // ur x-component
   function_1 = V1Real     // vr y-component

   function_2 = U1Imag   // ui x-component
   function_3 = V1Imag   // vi y-component
}

SOVelocityInitialConditions {

   function_0 = "0.0"     // u x-component
   function_1 = "0.0"     // v y-component
}

U2 = "X_0^2*X_1/L"
V2 = "-X_0*X_1^2/L"
SOVelocityExact {

   L = LENGTH
   
   function_0 = U2     // u x-component
   function_1 = V2     // v y-component
}

FOPressureInitialConditions {

   function_0 = "0.0"      // pr 
   function_1 = "0.0"      // pi 

}

FOPressureExact {

   c = C0
   L = LENGTH

   function_0 = "c^2*X_0/L"      // pr 
   function_1 = "2*c^2*X_0/L"    // pi 

}

SOPressureInitialConditions {
   function = "0.0"       
}

SOPressureExact {

   L = LENGTH
   function = "X_0^2*X_1^2/L - 1.0/9.0"       
}

F1_fcn {

   lambda = LAMBDA
   mu = MU
   rho0 = RHO0
   omega = OMEGA0
   c     = C0 

   L = LENGTH

   function_0 = "(2*c^2 + omega*rho0*X_0)/L"     // fur x-component
   
   function_1 = "(omega*rho0*X_1)/L"     // fvr y-component

   function_2 = "(c^2 - 2*omega*rho0*X_0)/L"   // fui x-component

   function_3 = "(-2*omega*rho0*X_1)/L"   // fvi y-component
}

F2_fcn {

   mu = MU
   L = LENGTH

   function_0 = "(2*X_1*(X_0*X_1 - mu))/L"
   function_1 = "(2*X_0*(X_0*X_1 + mu))/L"
}

Q1_fcn  {

   L = LENGTH
   rho0 = RHO0
   omega = OMEGA0

   function_0 = "(4*rho0 + omega*X_0)/L"     // fpr
   function_1 = "(2*rho0 - 2*omega*X_0)/L"    // fpi
}

Q2_fcn  {
     
     function = "0.0"
}

mu {

   c = MU
   function = "c"
}

lambda {

   c = LAMBDA
   function = "c"
}

rho {

   c = RHO0
   function = "c"
}


// u1r velocity
FOVelocityRealBcCoefs_0 {
 
   L = LENGTH

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = U1Real
   gcoef_function_1 = U1Real
   gcoef_function_2 = U1Real
   gcoef_function_3 = U1Real

}

// v1r velocity
FOVelocityRealBcCoefs_1 {

   L = LENGTH

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = V1Real
   gcoef_function_1 = V1Real
   gcoef_function_2 = V1Real
   gcoef_function_3 = V1Real

}

// u1i velocity
FOVelocityImagBcCoefs_0 {

   L = LENGTH

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = U1Imag
   gcoef_function_1 = U1Imag
   gcoef_function_2 = U1Imag
   gcoef_function_3 = U1Imag

}

FOVelocityImagBcCoefs_1 {

   L = LENGTH

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = V1Imag
   gcoef_function_1 = V1Imag
   gcoef_function_2 = V1Imag
   gcoef_function_3 = V1Imag

}

// u2 velocity
SOVelocityBcCoefs_0 {
 
   L = LENGTH

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = U2
   gcoef_function_1 = U2
   gcoef_function_2 = U2
   gcoef_function_3 = U2

}

// v2
SOVelocityBcCoefs_1 {

   L = LENGTH

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = V2
   gcoef_function_1 = V2
   gcoef_function_2 = V2
   gcoef_function_3 = V2

}

DensityBcCoefs_0 {

   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"

}

DensityBcCoefs_1 {

   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"

}

ShearViscosityBcCoefs {

   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"

}

BulkViscosityBcCoefs {

   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"

}

START_TIME                          =  0.0e0     // initial simulation time
END_TIME                            =  1.5e0     // final simulation time
GROW_DT                             =  2.0e0     // growth factor for timesteps
MAX_INTEGRATOR_STEPS                =  1         // max number of simulation timesteps
REGRID_INTERVAL                     =  5
CFL_MAX                             =  1.0   
NUM_INS_CYCLES                      =  1
PRECOND_REINIT_INTERVAL             =  1  
ENABLE_LOGGING                      = TRUE 
NORMALIZE_PRESSURE                  = TRUE 
NORMALIZE_VELOCITY                  = FALSE   
EXPLICITLY_REMOVE_NULLSPACE         = TRUE  
VORTICITY_TAGGING                   = TRUE                       // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER                          = 2                          // size of tag buffer used by grid generation algorithm
DT_MAX                              = 10
OUTPUT_U1                           = TRUE
OUTPUT_U2                           = TRUE
OUTPUT_P1                           = TRUE
OUTPUT_P2                           = TRUE
OUTPUT_OMEGA2                       = TRUE
OUTPUT_RHO                          = TRUE
OUTPUT_MU                           = TRUE

AcousticStreamingHierarchyIntegrator {

   start_time                  = START_TIME
   end_time                    = END_TIME
   grow_dt                     = GROW_DT
   normalize_pressure          = NORMALIZE_PRESSURE
   normalize_velocity          = NORMALIZE_VELOCITY 
   cfl                         = CFL_MAX
   dt_max                      = DT_MAX
   using_vorticity_tagging     = VORTICITY_TAGGING
   vorticity_rel_thresh        = 0.25
   tag_buffer                  = TAG_BUFFER
   regrid_interval             = REGRID_INTERVAL
   output_U1                   = OUTPUT_U1
   output_U2                   = OUTPUT_U2
   output_P1                   = OUTPUT_P1
   output_P2                   = OUTPUT_P2
   output_Omega2               = OUTPUT_OMEGA2
   output_rho                  = OUTPUT_RHO
   output_mu                   = OUTPUT_MU
   precond_reinit_interval     = PRECOND_REINIT_INTERVAL
   enable_logging              = ENABLE_LOGGING
   max_integrator_steps        = MAX_INTEGRATOR_STEPS
   explicitly_remove_nullspace = EXPLICITLY_REMOVE_NULLSPACE
   num_cycles                  = NUM_INS_CYCLES

   acoustic_angular_frequency = OMEGA0
   sound_speed    = C0
   rho_vc_interpolation_type = "VC_AVERAGE_INTERP"
   mu_vc_interpolation_type  = "VC_HARMONIC_INTERP"

   first_order_solver_db {
      ksp_type          = "preonly"
      pc_type           = "lu"
      rel_residual_tol  = 1.0e-14
      abs_residual_tol  = 1.0e-15
      initial_guess_nonzero = FALSE
   }

   stokes_solver_db {
      ksp_type       = "fgmres"
      max_iterations = 1000
   }

   stokes_precond_db {
      max_iterations = 1
   }

   velocity_solver_db {
      ksp_type = "richardson"
      max_iterations = 1
      rel_residual_tol = 1.0e-1
   }

   velocity_precond_db {
      max_iterations = 100
      ksp_type = "gmres"
      pc_type = "jacobi"
   }

   pressure_solver_db {
      ksp_type = "richardson"
      max_iterations = 1
      rel_residual_tol = 1.0e-1
   }

   pressure_precond_db {
      num_pre_sweeps  = 3
      num_post_sweeps = 3
      rel_residual_tol = 1.0e-12
      abs_residual_tol = 1.0e-50
      max_iterations = 100
   }
    
}

Main {

   // log file parameters
   log_file_name = "acoustic_hier_integrator_2d.log"
   log_all_nodes = FALSE

   // visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_interval = 1               //zero to turn off
   viz_dump_dirname = "viz2d_acoustic_hier"
   visit_number_procs_per_file = 1

   // restart dump parameters
   restart_interval      = 0                 // zero to turn off
   restart_write_dirname = "restart_acoustic_2d"

   // timer dump parameters
   timer_dump_interval  = 0                 // zero to turn off
   timer_enabled = FALSE
   
}


CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = LENGTH, LENGTH      // upper end of computational domain.
   periodic_dimension = PERIODIC_BC, PERIODIC_BC
}

GriddingAlgorithm {
   max_levels = 1                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
//    level_0 = [( N/4 , 0 ),( 3*N/4 - 1 , N - 1 )]
//    level_0 = [( 0 , N/4 ),( N - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )] , [( N/4 , N/2 ),( N/2 - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( N/2 - 1 , 3*N/4 - 1 )] , [( N/2 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )]
      level_0 = [( N/4 , N/4 ),( N/2 - 1 , N/2 - 1 )] , [( N/2 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )] , [( N/4 , N/2 ),( N/2 - 1 , 3*N/4 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*"
}
