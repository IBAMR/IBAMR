u {
   function_0 = "sin(2*PI*X_0)*sin(2*PI*X_1)"  // x-component
   function_1 = "cos(2*PI*X_1)*sin(2*PI*X_2)"  // y-component
   function_2 = "sin(2*PI*X_0)*sin(2*PI*X_2)"  // z-component
}

mu {
   function_0 = "cos(2*PI*X_0)*sin(2*PI*X_1)*cos(2*PI*X_2)"
}

f {
   function_0 = "4.0*PI*PI*cos(2*PI*X_0)*((-2 + 3*cos(4*PI*X_1))*cos(2*PI*X_2)*sin(2*PI*X_0) +  cos(2*PI*X_0)*cos(4*PI*X_2)*sin(2*PI*X_1))"  // x-component
   function_1 = "2.0*PI*PI*cos(2*PI*X_2)*sin(4*PI*X_1)*(cos(4*PI*X_0)+3.0*sin(2*PI*(X_0-X_2))-3.0*sin(2*PI*(X_0+X_2)))"  // y-component
   function_2 = "4.0*PI*PI*cos(2*PI*X_0)*cos(2*PI*X_2)*(cos(4*PI*X_1)*cos(2*PI*X_2)-6.0*sin(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_2))"  // z-component
}

Main {
// log file parameters
   log_file_name = "VCLaplaceTester3d.log"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz3d"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

N = 128

CartesianGeometry {
   domain_boxes       = [(0,0,0), (N - 1,N - 1,N - 1)]
   x_lo               = 0, 0, 0      // lower end of computational domain.
   x_up               = 1, 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1, 1
}

GriddingAlgorithm {
   max_levels = 1                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4, 4              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4, 4, 4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [( N/4 , N/4, N/4 ),( N/2 - 1 , N/2 - 1, N/2 - 1 )] , [( N/2 , N/4, N/4 ),( 3*N/4 - 1 , N/2 - 1, N/2 - 1 )] , [( N/4 , N/2, N/2  ),( N/2 - 1 , 3*N/4 - 1, 3*N/4 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*"
}
