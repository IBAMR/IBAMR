PI = 3.1415926535897932384626433832795

// grid spacing parameters
MAX_LEVELS = 3                            // maximum number of levels in locally refined grid
REF_RATIO  = 2                            // refinement ratio between levels
N = 64                                    // actual    number of grid cells on coarsest grid level
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // effective number of grid cells on finest   grid level

L = N
SIGMA = 1.5
KAPPA = 1/(SIGMA*sqrt(2*PI))
U_adv = 0.0
FREQ = 1.0
OMEGA = 2*PI*FREQ
DIFF_Q = 0.0
MIN_TAG_VAL = 0.1
MAX_TAG_VAL = 0.4

// solver parameters
START_TIME         = 0.0e0                // initial simulation time
END_TIME           = 2.3                // final simulation time
GROW_DT            = 2.0e0                // growth factor for timesteps
NUM_CYCLES         = 1                    // number of cycles of fixed-point iteration
CONVECTIVE_TS_TYPE = "ADAMS_BASHFORTH"    // convective time stepping type
CONVECTIVE_OP_TYPE = "PPM"                // convective differencing discretization type
CONVECTIVE_FORM    = "ADVECTIVE"          // how to compute the convective terms
CFL_MAX            = 0.2                  // maximum CFL number
DT_MAX             = L*0.1/NFINEST       // maximum timestep size
TAG_BUFFER         = 1                    // sized of tag buffer used by grid generation algorithm
REGRID_INTERVAL    = 1             // effectively disable regridding
ENABLE_LOGGING     = TRUE

// exact solution function expressions

Q = "kappa*exp(-(X_0 - x_c)^2/(2*sigma^2))*cos(omega*t)"
F = "kappa*exp(-(X_0 - x_c)^2/(2*sigma^2))*( -omega*sin(omega*t) + u_adv*cos(omega*t)*(-(X_0 - x_c)/sigma^2) - diff_q*cos(omega*t)*(X_0 - x_c)^2/sigma^2 + diff_q*cos(omega*t)/sigma^2 )"


VelocityInitialConditions {
   u_adv = U_adv
   function_0 = "u_adv"
   function_1 = "0"
}

ForcingFunction {
   
   kappa = KAPPA
   sigma = SIGMA
   x_c = L/2
   omega = OMEGA
   u_adv = U_adv
   diff_q = DIFF_Q

   function = F
}

QInitialConditions {

   kappa = KAPPA
   x_c = L/2
   omega = OMEGA
   sigma = SIGMA

   function = Q
}

Q_bc_coefs {
   
   kappa = KAPPA
   x_c = L/2
   omega = OMEGA
   sigma = SIGMA

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = Q
   gcoef_function_1 = Q
   gcoef_function_2 = Q
   gcoef_function_3 = Q
}

AdvDiffSemiImplicitHierarchyIntegrator {
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   num_cycles                    = NUM_CYCLES
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   cfl                           = CFL_MAX
   dt_max                        = DT_MAX
   tag_buffer                    = TAG_BUFFER
   regrid_interval               = REGRID_INTERVAL
   enable_logging                = ENABLE_LOGGING
}

Main {

// log file parameters
   log_file_name               = "adv_diff2d.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = 0
   viz_dump_dirname            = "viz_adv_diff2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_adv_diff2d"

// timer dump parameters
   timer_dump_interval         = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0),(N - 1,N - 1) ]
   x_lo = 0,0
   x_up = L,L
   periodic_dimension = 1,1
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 16,16  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
   RefineBoxes {
//    level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
//    level_0 = [(0,0),(N/2 - 1,N/2 - 1)]
      level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total     = TRUE
   print_threshold = 0.1
   timer_list      = "IBAMR::*::*","IBTK::*::*","*::*::*"
}
