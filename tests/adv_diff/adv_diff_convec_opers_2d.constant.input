// physical parameters
L = 1.0

// grid spacing parameters
MAX_LEVELS = 2                            // maximum number of levels in locally refined grid
REF_RATIO  = 2                            // refinement ratio between levels
N = 64                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing
DX  = L/NFINEST                                // mesh width on finest   grid level

CONVECTIVE_DIFFERENCING_TYPE = "ADVECTIVE"
OUTFLOW_EXTRAP_TYPE = "CONSTANT"

QFCN = "cos(2*PI*X_0)*cos(2*PI*X_1)"

ConvecOper {
    outflow_bdry_extrap_type = OUTFLOW_EXTRAP_TYPE
}

Q {
   function = QFCN
}

Q_bcs {
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   
   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = QFCN
   gcoef_function_1 = QFCN
   gcoef_function_2 = QFCN
   gcoef_function_3 = QFCN
}

U {
   function_0 = "1.0"
   function_1 = "1.0"
}

Exact {
   function = "-2*PI*sin(2*PI*(X_0+X_1))"
}

Main {
// log file parameters
   log_file_name               = "output"
   log_all_nodes               = FALSE
   
   viz_writer                  = "VisIt"
   viz_dump_interval           = 2
   viz_dump_dirname            = "viz_advect2d"
   visit_number_procs_per_file = 1
}

CartesianGeometry {
   domain_boxes = [ (0,0),(N - 1,N - 1) ]
   x_lo = 0,0
   x_up = L,L
   periodic_dimension = 0,0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total     = TRUE
   print_threshold = 0.1
   timer_list      = "IBAMR::*::*","IBTK::*::*","*::*::*"
}
