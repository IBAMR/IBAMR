// grid spacing parameters
MAX_LEVELS = 1                            // maximum number of levels in locally refined grid
REF_RATIO  = 4                            // refinement ratio between levels
N = 16                                    // actual    number of grid cells on coarsest grid level
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // effective number of grid cells on finest   grid level

ExactFcn {
  function_0 = "8*PI*sin(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_2)-2*PI*cos(2*PI*X_1)*(sin(2*PI*(X_0-X_2))+3*sin(2*PI*(X_0+X_2)))"
  function_1 = "-4*PI*(cos(2*PI*X_1)*cos(2*PI*X_2)*sin(2*PI*X_0)+2*cos(2*PI*(X_0+X_2))*sin(2*PI*X_1))"
  function_2 = "-4*PI*(cos(2*PI*X_2)*sin(2*PI*X_0)*sin(2*PI*X_1)+2*sin(2*PI*(X_0+X_1))*sin(2*PI*X_2))"
  function_3 = "-2*PI*cos(2*PI*X_1)*sin(2*PI*X_0)*(2*cos(2*PI*X_2)+sin(2*PI*X_2))-PI*sin(2*PI*X_1)*(cos(2*PI*(X_0-X_2))+3*cos(2*PI*(X_0+X_2))+4*sin(2*PI*(X_0+X_2)))"
  function_4 = "-2*PI*cos(2*PI*X_2)*sin(2*PI*X_0)*(cos(2*PI*X_1)+2*sin(2*PI*X_1))-PI*(4*cos(2*PI*(X_0+X_1))+sin(2*PI*(X_0-X_1))+3*sin(2*PI*(X_0+X_1)))*sin(2*PI*X_2)"
  function_5 = "-PI*(2*sin(2*PI*(X_0-X_1-X_2))+sin(2*PI*(X_0-X_1+X_2))+5*sin(2*PI*(X_0+X_1+X_2)))"
}

UFcn {
  function_0 = "sin(2*PI*X_0)*cos(2*PI*X_1)*sin(2*PI*X_2)"
  function_1 = "sin(2*PI*X_0)*sin(2*PI*X_1)*cos(2*PI*X_2)"
  function_2 = "sin(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_2)"
}

StressFcn {
  function_0 = "1.0"
  function_1 = "1.0"
  function_2 = "1.0"
  function_3 = "2.0"
  function_4 = "2.0"
  function_5 = "2.0"
}

CF_UCD {

}

Main {
// log file parameters
   log_file_name               = "output"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = 0
   viz_dump_dirname            = "visit"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_INS2d"

// timer dump parameters
   timer_dump_interval         = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0,0),(N - 1,N - 1,N - 1) ]
   x_lo = 0.0, 0.0, 0.0
   x_up = 1.0, 1.0, 1.0
   periodic_dimension = 1,1,1
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [( N/4,N/2,N/4 ),( N/2 - 1,3*N/4 - 1,N/2 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total     = TRUE
   print_threshold = 0.1
   timer_list      = "IBAMR::*::*","IBTK::*::*","*::*::*"
}
