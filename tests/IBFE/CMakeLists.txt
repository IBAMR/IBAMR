if(IBAMR_HAVE_LIBMESH)
# 2-D Tests
  ibamr_add_2d_tests(explicit_ex0)
  ibamr_add_2d_tests(explicit_ex1
    CASES
      "eliminate_pressure_jumps"
      "impose_pressure_jumps"
      "mpirun=4"
      "nodal_quadrature"
      "nodal_quadrature.mpirun=4"
  )
  ibamr_add_2d_tests(explicit_ex4
    CASES
      "a.postprocessor"
      "amr-2.mpirun=4"
      "amr.mpirun=4"
      "amr.nodal_quadrature.mpirun=4"
      "amr.restart=50.mpirun=4"
      "displace.mpirun=4"
      "FORWARD_EULER"
      "FORWARD_EULER.mpirun=4"
      "inactive_1.mpirun=4"
      "inactive_1.mpirun=4.restart=50"
      "<default>"
      "mpirun=4"
      "mpirun=5"
      "multilevel.a"
      "multilevel.a.mpirun=5"
      "multilevel.b"
      "multilevel.b.mpirun=5"
      "multilevel.c"
      "multilevel.d"
      "multilevel.e"
      "no-regrid.mpirun=4"
      "postprocessor"
      "postprocessor.mpirun=4"
      "postprocessor.scratch_hier.mpirun=4"
      "restart=50"
      "restart=50.mpirun=5"
      "scratch_hier.levels=1.mpirun=4"
      "scratch_hier.levels=4.mpirun=4"
      "scratch_hier.merge.mpirun=4"
      "scratch_hier.mpirun=4"
      "scratch_hier.multilevel.b"
      "scratch_hier.multilevel.b.mpirun=4"
      "scratch_hier.nodeweight.mpirun=4"
      "scratch_hier.restart=25.mpirun=4"
      "source_test"
      "TRAPEZOIDAL_RULE"
      "TRAPEZOIDAL_RULE.mpirun=4"
  )
  ibamr_add_2d_tests(explicit_ex5
    CASES
      "mpirun=2"
      "regrid.mpirun=2"
      "restart=40.mpirun=2"
  )
  ibamr_add_2d_tests(explicit_ex8
    CASES
      "<default>"
      "mpirun=4"
      "scratch_hier"
      "scratch_hier.mpirun=4"
  )
  ibamr_add_2d_tests(interpolate_velocity_01
    CASES
      "a"
      "a.mpirun=4"
      "amr.a"
      "amr.a.mpirun=4"
      "amr.nodal_quadrature.a"
      "amr.nodal_quadrature.a.mpirun=4"
      "b.bspline-3"
      "b.bspline-4"
      "b.bspline-5"
      "b.bspline-6"
      "b.ib-3"
      "b.ib-4-w8"
      "b.ib-4"
      "b.ib-5"
      "b.ib-6"
      "b"
      "b.mpirun=4"
      "b.piecewise-cubic"
      "b.piecewise-linear"
      "c"
      "c.mpirun=4"
      "d"
      "d.mpirun=4"
      "multilevel.a"
      "multilevel.b"
      "multilevel.b.mpirun=4"
      "multilevel.c"
      "nodal_quadrature.a"
      "nodal_quadrature.a.mpirun=4"
      "nodal_quadrature.b"
      "nodal_quadrature.b.mpirun=4"
      "nodal_quadrature.c"
      "nodal_quadrature.c.mpirun=4"
      "nodal_quadrature.tri3"
      "nodal_quadrature.tri6"
  )
  ibamr_add_2d_tests(ib_partitioning_01
    CASES
      "quad9.mpirun=2"
      "quad9.mpirun=6"
      "tri3.b.mpirun=8"
      "tri3.mpirun=2"
      "tri3.mpirun=6"
  )
  ibamr_add_2d_tests(ib_partitioning_02
    CASES
      "quad9.mpirun=2"
      "tri3"
      "tri3.mpirun=4"
      "tri6.mpirun=4"
  )
  ibamr_add_2d_tests(zero_exterior_values)

# 3-D Tests
  ibamr_add_3d_tests(explicit_ex2
    CASES
      "mpirun=2"
      "nodal_quadrature"
  )
  ibamr_add_3d_tests(explicit_ex4
    CASES
      "inactive_1.mpirun=4"
      "mpirun=4"
      "scratch_hier.merge.mpirun=4"
      "scratch_hier.mpirun=4"
  )
  ibamr_add_3d_tests(explicit_ex5
    CASES
      "mpirun=2"
  )
  ibamr_add_3d_tests(ib_partitioning_01
    CASES
      "hex27.mpirun=2"
      "hex27.mpirun=6"
      "tet4.mpirun=2"
      "tet4.mpirun=6"
  )
  ibamr_add_3d_tests(ib_partitioning_02
    CASES
      "hex27"
      "hex27.mpirun=4"
      "hex8.mpirun=4"
  )
  ibamr_add_3d_tests(interpolate_velocity_01
    CASES
      "a"
      "a.mpirun=4"
      "amr.a"
      "amr.a.mpirun=4"
      "b.bspline-3"
      "b.bspline-4"
      "b.bspline-5"
      "b.bspline-6"
      "b.ib-3"
      "b.ib-4-w8"
      "b.ib-4"
      "b.ib-5"
      "b.ib-6"
      "b"
      "b.mpirun=4"
      "b.piecewise-cubic"
      "b.piecewise-linear"
      "c"
      "c.mpirun=4"
      "nodal_quadrature.a"
      "nodal_quadrature.a.mpirun=4"
      "nodal_quadrature.b"
      "nodal_quadrature.b.mpirun=4"
      "nodal_quadrature.c"
      "nodal_quadrature.c.mpirun=4"
      "nodal_quadrature.tet10"
  )
  ibamr_add_3d_tests(zero_exterior_values)
endif()
