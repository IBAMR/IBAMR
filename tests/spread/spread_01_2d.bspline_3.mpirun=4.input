
L   = 1.0
MAX_LEVELS = 2
REF_RATIO  = 4
N = 4
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N
DX  = L/NFINEST
// TODO: making this lower produces slightly different numbers of quadrature
// points with sufficient compiler optimizations and triangles
MFAC = 0.25
ELEM_TYPE = "HEX8"

IB_DELTA_FUNCTION = "BSPLINE_3"

VelocityInitialConditions {
function_0 = "X_0 + 2*X_1*X_1"
function_1 = "2*X_0 + 3*X_0*X_0 - 2*X_1"
}

PressureInitialConditions {function = "42.0"}

IBHierarchyIntegrator {}

IBFEMethod {
   IB_delta_fcn               = IB_DELTA_FUNCTION
   enable_logging = FALSE
}

INSStaggeredHierarchyIntegrator {
   mu             = 1
   rho            = 1
}

Main {
   solver_type   = "STAGGERED"
   log_file_name = "output"
   log_all_nodes = FALSE
}

CartesianGeometry {
   domain_boxes = [ (0,0),(N - 1,N - 1) ]
   x_lo = 0,0
   x_up = L,L
   periodic_dimension = 0,0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 4, 4  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4  // all finer levels will use same values as level_0
   }
}

StandardTagAndInitialize {tagging_method = "GRADIENT_DETECTOR"}
LoadBalancer {}
