u {
   function_0 = "(1.0-X_0)*X_0*(1.0-X_1)*X_1" // x-component
   function_1 = "(1.0-X_0)*X_0*(1.0-X_1)*X_1"  // y-component
}

mu {
   function = "(1.0-X_0)*X_0*(1.0-X_1)*X_1"
}

f  {
   function_0 = "2.0*(-1.0 + X_1)^2 *X_1^2 + X_0^4*(1.0 + 6.0*(-1.0 + X_1)*X_1) + 2.0 * X0^3 * (-1.0 + 4.0 * (-2.0 + X_1) *(-1.0 + X_1) *X_1) + X_0^2 *(1.0 + 12.0 *(-1.0 + X_1)^3 *X_1) - 2.0 *X_0* (-1.0 + X_1) *X_1 *(1.0 - 8.0 *X_1 + 6.0 *X_1^2)"
   function_1 = "2.0 *(-1.0 + X_0)^2 *X_0^2 - 2.0 *(-1.0 + X_0) *X_0 *(1.0 - 8.0* X_0 + 6.0 *X_0^2) *X_1 + (1.0 + 12.0 *(-1.0 + X_0)^3 *X_0)* X_1^2 + 2.0 *(-1.0 + 4.0 *(-2.0 + X_0) *(-1.0 + X_0) *X_0)* X_1^3 + (1.0 + 6.0 *(-1.0 + X_0)* X_0)* X1^4"
}

Main {
// log file parameters
   log_file_name = "VCLaplaceTester2d.log"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_dirname = "viz2d"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

N = 32

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0      // lower end of computational domain.
   x_up               = 1, 1      // upper end of computational domain.
   periodic_dimension = 1, 1
}

GriddingAlgorithm {
   max_levels = 1                 // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 = 4, 4              // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512          // largest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4          // smallest patch allowed in hierarchy
                                  // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
//    level_0 = [( N/4 , 0 ),( 3*N/4 - 1 , N - 1 )]
//    level_0 = [( 0 , N/4 ),( N - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )] , [( N/4 , N/2 ),( N/2 - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( N/2 - 1 , 3*N/4 - 1 )] , [( N/2 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )]
      level_0 = [( N/4 , N/4 ),( N/2 - 1 , N/2 - 1 )] , [( N/2 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )] , [( N/4 , N/2 ),( N/2 - 1 , 3*N/4 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*"
}
