// physical parameters
MU  = 1.0e-2                                    // fluid viscosity
RHO = 1.0                                       // fluid density
L   = 1.0

// grid spacing parameters
MAX_LEVELS = 2                                  // maximum number of levels in locally refined grid
REF_RATIO  = 4                                  // refinement ratio between levels
N = 32                                          // actual    number of grid cells on coarsest grid level
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N        // effective number of grid cells on finest   grid level

// solver parameters
INS_SOLVER_TYPE             = "STAGGERED"       // the fluid solver to use (STAGGERED or COLLOCATED)
INS_NUM_CYCLES              = 1                 // number of cycles of fixed-point iteration
INS_CONVECTIVE_TS_TYPE      = "ADAMS_BASHFORTH" // convective time stepping type
INS_CONVECTIVE_OP_TYPE      = "PPM"             // convective differencing discretization type
INS_CONVECTIVE_FORM         = "ADVECTIVE"       // how to compute the convective terms
ADV_DIFF_SOLVER_TYPE        = "SEMI_IMPLICIT"   // the advection-diffusion solver to use (GODUNOV or SEMI_IMPLICIT)
ADV_DIFF_NUM_CYCLES         = 1                 // number of cycles of fixed-point iteration
ADV_DIFF_CONVECTIVE_TS_TYPE = "ADAMS_BASHFORTH" // convective time stepping type
ADV_DIFF_CONVECTIVE_OP_TYPE = "PPM"             // convective differencing discretization type
ADV_DIFF_CONVECTIVE_FORM    = "ADVECTIVE"       // how to compute the convective terms
NORMALIZE_PRESSURE          = TRUE              // whether to explicitly force the pressure to have mean zero
CFL_MAX                     = 0.2               // maximum CFL number
DT_MAX                      = 0.0625/NFINEST    // maximum timestep size
START_TIME                  = 0.0e0             // initial simulation time
END_TIME                    = 10*DT_MAX         // final simulation time
GROW_DT                     = 2.0e0             // growth factor for timesteps
VORTICITY_TAGGING           = TRUE              // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER                  = 1                 // sized of tag buffer used by grid generation algorithm
REGRID_INTERVAL             = 10000000          // effectively disable regridding
OUTPUT_U                    = TRUE
OUTPUT_P                    = TRUE
OUTPUT_F                    = FALSE
OUTPUT_OMEGA                = TRUE
OUTPUT_DIV_U                = TRUE
ENABLE_LOGGING              = TRUE

// collocated solver parameters
PROJECTION_METHOD_TYPE = "PRESSURE_UPDATE"
SECOND_ORDER_PRESSURE_UPDATE = TRUE

// exact solution function expressions
U = "1.0 + exp(-4.0*PI*PI*nu*t)*(C*cos(2*PI*(X_1-t)) + A*sin(2*PI*(X_2-t)))"
V = "1.0 + exp(-4.0*PI*PI*nu*t)*(B*sin(2*PI*(X_0-t)) + A*cos(2*PI*(X_2-t)))"
W = "1.0 + exp(-4.0*PI*PI*nu*t)*(B*cos(2*PI*(X_0-t)) + C*sin(2*PI*(X_1-t)))"
P = "-exp(-8.0*PI*PI*nu*t)*(A*C*cos(2*PI*(X_1-t))*sin(2*PI*(X_2-t)) + A*B*sin(2*PI*(X_0-t))*cos(2*PI*(X_2-t)) + B*C*cos(2*PI*(X_0-t))*sin(2*PI*(X_1-t)))"
mGP0 = "exp(-8.0*PI^2*nu*t)*(2*A*B*cos(2*PI*(X_0-t))*PI*cos(2*PI*(X_2-t))-2*B*C*sin(2*PI*(X_0-t))*PI*sin(2*PI*(X_1-t)))"  // - d/dX_0 P
mGP1 = "exp(-8.0*PI^2*nu*t)*(-2*A*C*sin(2*PI*(X_1-t))*PI*sin(2*PI*(X_2-t))+2*B*C*cos(2*PI*(X_0-t))*cos(2*PI*(X_1-t))*PI)" // - d/dX_1 P
mGP2 = "exp(-8.0*PI^2*nu*t)*(2*A*C*cos(2*PI*(X_1-t))*cos(2*PI*(X_2-t))*PI-2*A*B*sin(2*PI*(X_0-t))*sin(2*PI*(X_2-t))*PI)"  // -d/dX_2 P

VelocityInitialConditions {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0
   function_0 = U
   function_1 = V
   function_2 = W
}

AdvDiffForcingFunction {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0
   function_0 = mGP0
   function_1 = mGP1
   function_2 = mGP2
}

VelocityBcCoefs_0 {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = U
   gcoef_function_1 = U
   gcoef_function_2 = U
   gcoef_function_3 = U
   gcoef_function_4 = U
   gcoef_function_5 = U
}

VelocityBcCoefs_1 {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = V
   gcoef_function_1 = V
   gcoef_function_2 = V
   gcoef_function_3 = V
   gcoef_function_4 = V
   gcoef_function_5 = V
}

VelocityBcCoefs_2 {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = W
   gcoef_function_1 = W
   gcoef_function_2 = W
   gcoef_function_3 = W
   gcoef_function_4 = W
   gcoef_function_5 = W
}

AdvDiffBcCoefs_0 {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = U
   gcoef_function_1 = U
   gcoef_function_2 = U
   gcoef_function_3 = U
   gcoef_function_4 = U
   gcoef_function_5 = U
}

AdvDiffBcCoefs_1 {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = V
   gcoef_function_1 = V
   gcoef_function_2 = V
   gcoef_function_3 = V
   gcoef_function_4 = V
   gcoef_function_5 = V
}

AdvDiffBcCoefs_2 {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = W
   gcoef_function_1 = W
   gcoef_function_2 = W
   gcoef_function_3 = W
   gcoef_function_4 = W
   gcoef_function_5 = W
}

PressureInitialConditions {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0
   function = P
}

INSCollocatedHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   num_cycles                    = INS_NUM_CYCLES
   convective_time_stepping_type = INS_CONVECTIVE_TS_TYPE
   convective_op_type            = INS_CONVECTIVE_OP_TYPE
   convective_difference_form    = INS_CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT_MAX
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.25,0.125
   tag_buffer                    = TAG_BUFFER
   regrid_interval               = REGRID_INTERVAL
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
   projection_method_type        = PROJECTION_METHOD_TYPE
   use_2nd_order_pressure_update = SECOND_ORDER_PRESSURE_UPDATE
}

INSStaggeredHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   num_cycles                    = INS_NUM_CYCLES
   convective_time_stepping_type = INS_CONVECTIVE_TS_TYPE
   convective_op_type            = INS_CONVECTIVE_OP_TYPE
   convective_difference_form    = INS_CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT_MAX
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.25,0.125
   tag_buffer                    = TAG_BUFFER
   regrid_interval               = REGRID_INTERVAL
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
}

AdvDiffGodunovHierarchyIntegrator {
   start_time                 = START_TIME
   end_time                   = END_TIME
   grow_dt                    = GROW_DT
   convective_difference_form = ADV_DIFF_CONVECTIVE_FORM
   cfl                        = CFL_MAX
   dt_max                     = DT_MAX
   tag_buffer                 = TAG_BUFFER
   regrid_interval            = REGRID_INTERVAL
   enable_logging             = ENABLE_LOGGING

   AdvDiffGodunovHypPatchOps {
      compute_init_velocity  = TRUE
      compute_half_velocity  = TRUE
      compute_final_velocity = FALSE
      extrap_type = "LINEAR"
   }

   HyperbolicLevelIntegrator {
      cfl                      = CFL_MAX
      cfl_init                 = CFL_MAX
      lag_dt_computation       = TRUE
      use_ghosts_to_compute_dt = FALSE
   }
}

AdvDiffSemiImplicitHierarchyIntegrator {
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   num_cycles                    = ADV_DIFF_NUM_CYCLES
   convective_time_stepping_type = ADV_DIFF_CONVECTIVE_TS_TYPE
   convective_op_type            = ADV_DIFF_CONVECTIVE_OP_TYPE
   convective_difference_form    = ADV_DIFF_CONVECTIVE_FORM
   cfl                           = CFL_MAX
   dt_max                        = DT_MAX
   tag_buffer                    = TAG_BUFFER
   regrid_interval               = REGRID_INTERVAL
   enable_logging                = ENABLE_LOGGING
}

Main {
   ins_solver_type      = INS_SOLVER_TYPE
   adv_diff_solver_type = ADV_DIFF_SOLVER_TYPE

// log file parameters
   log_file_name               = "INS3d.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = NFINEST/8
   viz_dump_dirname            = "viz_INS3d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_INS3d"

// timer dump parameters
   timer_dump_interval         = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0,0),(N - 1,N - 1,N - 1) ]
   x_lo = 0,0,0
   x_up = L,L,L
   periodic_dimension = 1,1,1
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = 512,512,512  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   4,  4,  4  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
      level_1 = [((REF_RATIO^1)*N/4 + 1,(REF_RATIO^1)*N/4 + 1,(REF_RATIO^1)*N/4 + 1),(3*(REF_RATIO^1)*N/4 - 2,3*(REF_RATIO^1)*N/4 - 2,3*(REF_RATIO^1)*N/4 - 2)]
      level_2 = [((REF_RATIO^2)*N/4 + 2,(REF_RATIO^2)*N/4 + 2,(REF_RATIO^2)*N/4 + 2),(3*(REF_RATIO^2)*N/4 - 3,3*(REF_RATIO^2)*N/4 - 3,3*(REF_RATIO^2)*N/4 - 3)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total     = TRUE
   print_threshold = 0.1
   timer_list      = "IBAMR::*::*","IBTK::*::*","*::*::*"
}
