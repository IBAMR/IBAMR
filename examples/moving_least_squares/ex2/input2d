// Complex Fluid parameters
CONFORMATION_TENSOR = TRUE
SQUARE_ROOT_EVOLVE  = FALSE
LOG_CONFORM_EVOLVE  = FALSE
FLUID_MODEL         = "ROLIEPOLY"
CONVECTIVE_OPERATOR_TYPE   = "WAVE_PROP"
OUTPUT_CONFORMATION_TENSOR = TRUE
OUTPUT_STRESS_TENSOR = TRUE
ALPHA = 0.013//0.5//0.3
LAMBDA_D = 0.05623//4.1
LAMBDA_R = 0.1//LAMBDA_D/3/Z
Z = LAMBDA_D/LAMBDA_R/3
tau_e = LAMBDA_R/Z/Z
BETA_R = 0.0//0.283
DELTA_R = -0.5
RELAXATION_TIME=LAMBDA_D
Ge = 72800//g/(mm*s)
USING_EXACT_U = FALSE

RHO = 0.0//1.0e-3
VISCOSITY = Ge*LAMBDA_D
MU = VISCOSITY/99
U_MAX = 1.5*2.09

// Constants
PI          = 3.141592653589
VISC_CFL   = 1E-16           // desired viscous CFL number
STOKES_ITER = 4
STOKES_TOL = 1.0e-8//12         // Stokes' solver tolerance
SOLVER_TOL = 1.0e-8//12         // Stokes' solver tolerance
DELTA      = 0.0             // regularization parameter for mobility matrix

   
// BCs
PERIODIC            = 0
NORMALIZE_PRESSURE  = TRUE//FALSE           // whether to explicitly force the pressure to have mean zero
NORMALIZE_VELOCITY  = (PERIODIC==1)  // for Stokes flow (rho = 0)
P_WALL =1.0

// Gridding
DX  = 0.1//0.125*0.125//10.0/8/128//0.00976562//0.5
DT = 1e-4//VISC_CFL*DX^2/MU
D1 = 10.0
D2 = 1.5
W = 10.0
H = 1.5 // this is used to control if we are imposing velocity on the entire inlet or on a narrower part
L = 10.0
Nx=int(L/DX)
Ny=int(W/DX)
Re = RHO*U_MAX*D2/(MU+VISCOSITY)
n_sample = Nx//100

PATCH_SIZE = Nx
Lx = Nx*DX
Ly = Ny*DX

// solver parameters
MOBILITY_SOLVER_TYPE = "DIRECT"
DELTA_FUNCTION       = "IB_6"
START_TIME           = 0.0e0                         // initial simulation time
END_TIME             = 2.0//10.0//10000*DT//100                        // final simulation time
GROW_DT              = 1.0e0                         // growth factor for timesteps
NUM_CYCLES_INS       = 1                             // number of cycles of fixed-point iteration
CREEPING_FLOW        = FALSE                         // turn convection (v.grad v) on/off in INS
DIFFUSION_TIME_STEPPING = "BACKWARD_EULER"           // used both in INS and AdvDiff Solvers (for implicit Laplacian^n+1)
ADVECTION_TIME_STEPPING = "FORWARD_EULER"            // used in AdvDiff Solver (for explicit form of (v.grad C)^n )
CONVECTIVE_TS_TYPE      = "ADAMS_BASHFORTH"          // convective time stepping type used in INS solver
CONVECTIVE_OP_TYPE  = "PPM"                          // convective differencing discretization type; used in both INS and Adv-Diff solver
CONVECTIVE_FORM     = "ADVECTIVE"                    // how to compute the convective terms; used in both INS and Adv-Diff solver
CFL_MAX             = 0.5                            // maximum CFL number
ERROR_ON_DT_CHANGE  = TRUE                           // whether to emit an error message if the time step size changes
VORTICITY_TAGGING   = FALSE                          // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER          = 2                              // size of tag buffer used by grid generation algorithm
REGRID_CFL_INTERVAL = 0.5                            // regrid whenever any material point could have moved 0.5 meshwidths since previous regrid
OUTPUT_U            = TRUE
OUTPUT_P            = TRUE
OUTPUT_F            = TRUE
OUTPUT_OMEGA        = TRUE
OUTPUT_DIV_U        = FALSE
ENABLE_LOGGING      = FALSE


// AMR parameters
MAX_LEVELS = 1
REF_RATIO  = 4

//Advection Diffusion solver parameters
ADV_DIFF_SOLVER_TYPE = "SEMI_IMPLICIT"
ADV_DIFF_NUM_CYCLES = 2
ADV_DIFF_CONVECTIVE_OP_TYPE = "PPM"
ADV_DIFF_CONVECTIVE_TS_TYPE = "TRAPEZOIDAL_RULE"
ADV_DIFF_CONVECTIVE_FORM = "ADVECTIVE"

X1_lower = 0.0
X1_upper = W

// Parabolic profile
U_i = "(X1 < 0.5*(W-H))? 0.0 : ((X1 > 0.5*(W+H))? 0.0 : U_MAX*(1.0 - 4.0*((X1 - 0.5*W)*(X1 - 0.5*W))/(H*H)))"
U_o = "(X1 < 0.5*(W-H))? 0.0 : ((X1 > 0.5*(W+H))? 0.0 : U_MAX*(1.0 - 4.0*((X1 - 0.5*W)*(X1 - 0.5*W))/(H*H))*(-1.0))"

VelocityMask {
D1 = D1
D2 = D2
DX = DX

// no mask function for now
   function_0 = "((X1>=0.5*(D1+D2+DX*0.5)&&X0<=0.5*(D1-D2-DX*0.5))||(X1>=0.5*(D1+D2+DX*0.5)&&X0>=0.5*(D1+D2+DX*0.5))||(X1<=0.5*(D1-D2-DX*0.5)&&X0<=0.5*(D1-D2-DX*0.5))||(X1<=0.5*(D1-D2-DX*0.5)&&X0>=0.5*(D1+D2+DX*0.5)))? 1.0 : 1.0" 
   function_1 = "((X1>=0.5*(D1+D2+DX*0.5)&&X0<=0.5*(D1-D2-DX*0.5))||(X1>=0.5*(D1+D2+DX*0.5)&&X0>=0.5*(D1+D2+DX*0.5))||(X1<=0.5*(D1-D2-DX*0.5)&&X0<=0.5*(D1-D2-DX*0.5))||(X1<=0.5*(D1-D2-DX*0.5)&&X0>=0.5*(D1+D2+DX*0.5)))? 1.0 : 1.0" 
}

PressureMask {
D1 = D1
D2 = D2
DX = DX

function = "((X1>=0.5*(D1+D2+DX*0.5)&&X0<=0.5*(D1-D2-DX*0.5))||(X1>=0.5*(D1+D2+DX*0.5)&&X0>=0.5*(D1+D2+DX*0.5))||(X1<=0.5*(D1-D2-DX*0.5)&&X0<=0.5*(D1-D2-DX*0.5))||(X1<=0.5*(D1-D2-DX*0.5)&&X0>=0.5*(D1+D2+DX*0.5)))? 1.0 : 1.0" 

}

IBHierarchyIntegrator {
   delta_fcn           = DELTA_FUNCTION
   start_time          = START_TIME
   end_time            = END_TIME
   grow_dt             = GROW_DT
   num_cycles          = NUM_CYCLES_INS
   regrid_cfl_interval = REGRID_CFL_INTERVAL
   dt_max              = DT
   error_on_dt_change  = ERROR_ON_DT_CHANGE
   warn_on_dt_change   = TRUE
   tag_buffer          = TAG_BUFFER
   enable_logging      = ENABLE_LOGGING
   time_stepping_type  = "MIDPOINT_RULE"
   //max_integrator_steps = 1
}

num_structures = 4
CIBMethod {
    delta_fcn             = DELTA_FUNCTION
    enable_logging        = ENABLE_LOGGING
    lambda_dirname        = "./Lambda"
    lambda_dump_interval  = 1            // 0 turns off printing of Lagrange multiplier
    output_eul_lambda     = TRUE         // defaults to false
}

IBStandardInitializer {
    structure_names          = "A", "B", "C", "D"
    posn_shift = 0.0, 0.0
    max_levels      = MAX_LEVELS
    A{
      level_number             = MAX_LEVELS - 1
    }

    B{
      level_number             = MAX_LEVELS - 1
    }

    C{
      level_number             = MAX_LEVELS - 1
    }

    D{
      level_number             = MAX_LEVELS - 1
    }
}

CIBStaggeredStokesSolver 
{
    // Parameters to control various linear operators
    scale_interp_operator     = 1.0                                // defaults to 1.0
    scale_spread_operator     = 1.0                                // defaults to 1.0
    normalize_spread_force    = (PERIODIC == 1)                    // defaults to false
    regularize_mob_factor     = DELTA                              // defaults to 0.0
 
    // Setting for outer Krylov solver.
    options_prefix        = "SP_"
    max_iterations        = 100
    rel_residual_tol      = SOLVER_TOL
    abs_residual_tol      = 1e-50
    ksp_type              = "fgmres"
    pc_type               = "shell"
    initial_guess_nonzero = FALSE
    enable_logging        = TRUE
    mobility_solver_type  = MOBILITY_SOLVER_TYPE

    // Stokes solver for the 1st and 3rd Stokes solve in the preconditioner
    PCStokesSolver
    {
        normalize_pressure  = NORMALIZE_PRESSURE
        normalize_velocity  = NORMALIZE_VELOCITY
        stokes_solver_type  = "PETSC_KRYLOV_SOLVER"
        stokes_solver_db
        {
            max_iterations   = STOKES_ITER
            ksp_type         = "gmres"
            rel_residual_tol = STOKES_TOL
            abs_residual_tol = 0.0
        }

        stokes_precond_type = "PROJECTION_PRECONDITIONER"
        stokes_precond_db
        {
            // no options to set for projection preconditioner
        }
        velocity_solver_type = "PETSC_KRYLOV_SOLVER"
        velocity_solver_db
        {
            ksp_type = "richardson"
            max_iterations = 1
            rel_residual_tol  = 1.0e-16
            abs_residual_tol  = 0
        }
        velocity_precond_type = "HYPRE_LEVEL_SOLVER"
        velocity_precond_db
        {
            solver_type       = "Split"
            split_solver_type = "PFMG"
            enable_logging    = FALSE
            max_iterations    = 1
            rel_residual_tol  = 1.0e-16
            abs_residual_tol  = 0
        }

        pressure_solver_type = "PETSC_KRYLOV_SOLVER"
        pressure_solver_db
        {
            ksp_type = "richardson"
            enable_logging = FALSE
            max_iterations = 1
            rel_residual_tol = 1.0e-16
            abs_residual_tol = 0.0
        }
        pressure_precond_type = "HYPRE_LEVEL_SOLVER"
        pressure_precond_db
        {
            solver_type          = "PFMG" // Use hypre Struct multigrid
            enable_logging       = FALSE // Hypre does not give useful statistics so keep at FALSE
            num_pre_relax_steps  = 2  // number of pre- sweeps (1, 2, maybe 3)
            num_post_relax_steps = 2  // number of post-sweeps (1,2, maybe 3)
            max_iterations       = 1  // Keep this fixed at 1
            rel_residual_tol     = 1.0e-16 // Keep small
            abs_residual_tol     = 0
        }
    }// PCStokesSolve

    KrylovMobilitySolver
    {
        // Settings for outer solver.
        max_iterations        = 1000
        rel_residual_tol      = STOKES_TOL
        abs_residual_tol      = 1e-50
        ksp_type              = "fgmres"
        pc_type               = "none"
        initial_guess_nonzero = FALSE

        // Setting for Stokes solver used within mobility inverse
        normalize_pressure    = NORMALIZE_PRESSURE
        normalize_velocity    = NORMALIZE_VELOCITY
        stokes_solver_type    = "PETSC_KRYLOV_SOLVER"
        stokes_precond_type   = "PROJECTION_PRECONDITIONER"
        stokes_solver_db
        {
            max_iterations   = 100
            ksp_type         = "gmres"
            rel_residual_tol = STOKES_TOL
            abs_residual_tol = 0.0
        }

        velocity_solver_type = "PETSC_KRYLOV_SOLVER"
        velocity_solver_db
        {
            ksp_type = "richardson"
            max_iterations = 1
            rel_residual_tol  = 1.0e-16                    // does not matter
            abs_residual_tol  = 0                          // does not matter
        }
        velocity_precond_type = "HYPRE_LEVEL_SOLVER"
        velocity_precond_db
        {
            solver_type       = "Split"                    // split vx / vy / vz blocks
            split_solver_type = "PFMG"                     // use hypre PFMG MG on the blocks
            enable_logging    = FALSE
            max_iterations    = 1                          // this should always be 1
            rel_residual_tol  = 1.0e-16                    // does not matter
            abs_residual_tol  = 0                          // does not matter
        }

        pressure_solver_type = "PETSC_KRYLOV_SOLVER"
        pressure_solver_db
        {
            ksp_type = "richardson"
            enable_logging = FALSE
            max_iterations = 1
            rel_residual_tol = 1.0e-16
            abs_residual_tol = 0.0
        }
        pressure_precond_type = "HYPRE_LEVEL_SOLVER"
        pressure_precond_db
        {
            solver_type          = "PFMG"                  // use hypre Struct multigrid
            enable_logging       = FALSE                   // hypre does not give useful statistics so keep at FALSE
            num_pre_relax_steps  = 2                       // number of pre- sweeps (1, 2, maybe 3)
            num_post_relax_steps = 2                       // number of post-sweeps (1,2, maybe 3)
            max_iterations       = 1                       // keep this fixed at 1
            rel_residual_tol     = 1.0e-16                 // does not matter
            abs_residual_tol     = 0                       // does not matter
        }

    }// KrylovMobilitySolver

    DirectMobilitySolver
    {
        recompute_mob_mat_perstep = FALSE
        f_periodic_correction        = PERIODIC*2.84/(6.0*PI*MU*Lx)  // mobility correction due to periodic BC

        LAPACK_SVD
        {
            min_eigenvalue_threshold   = 1e-4     // defaults to 0.0
            eigenvalue_replace_value   = 1e-4     // replace eigenvalue less than min_eigenvalue_threshold
        }
    }// DirectMobilitySolver

    KrylovFreeBodyMobilitySolver
    {
        ksp_type = "preonly"
        pc_type  = "shell"
        max_iterations = 1
        abs_residual_tol = 1e-50
        rel_residual_tol = 1e-8
        initial_guess_nonzero = FALSE

    } //KrylovFreeBodyMobilitySolver

} // CIBStaggeredStokesSolver


INSStaggeredHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   num_cycles                    = NUM_CYCLES_INS
   viscous_time_stepping_type    = DIFFUSION_TIME_STEPPING
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   cfl                           = CFL_MAX
   dt_max                        = DT
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.25,0.125
   creeping_flow                 = CREEPING_FLOW
   tag_buffer                    = TAG_BUFFER
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
   init_convective_time_stepping_type = "FORWARD_EULER" 
}


Main {

// log file parameters
   log_file_name               = "IB.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt","Silo"
   viz_dump_interval           = 1//500
   viz_dump_dirname            = "viz_cross_slit"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_cross_slit"

// timer dump parameters
   timer_dump_interval         = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0),( Nx - 1, Ny - 1) ]
   x_lo = -2.5*DX, -2.5*DX//0.0, 0.0
   x_up = L+2.5*DX, W+2.5*DX// 
   periodic_dimension = 0,0
}

// Initial and BC conditions (if nonperiodic)

VelocityInitialConditions {
    L = L
    D1 = D1
    W = W
    mu = MU
    U_MAX = U_MAX
    H = H
    D2 = D2
    DX = DX

   function_0 = "0.0"//U_i
   function_1 = "0.0"
}

VelocityBcCoefs_0 {
    L = L
    D1 = D1
    W = W
    mu = MU
    U_MAX = U_MAX
    H = H
    D2 = D2
    DX = DX

    acoef_function_0 = "1.0"
    acoef_function_1 = "1.0"
    acoef_function_2 = "1.0"//"(X0 < 0.5*(D1-D2))? 1.0 : ((X0 > 0.5*(D1+D2))? 1.0 : 0.0)"
    acoef_function_3 = "1.0"//"(X0 < 0.5*(D1-D2))? 1.0 : ((X0 > 0.5*(D1+D2))? 1.0 : 0.0)"

    bcoef_function_0 = "0.0"
    bcoef_function_1 = "0.0"
    bcoef_function_2 = "0.0"//"(X0 < 0.5*(D1-D2))? 0.0 : ((X0 > 0.5*(D1+D2))? 0.0 : 1.0)"
    bcoef_function_3 = "0.0"//"(X0 < 0.5*(D1-D2))? 0.0 : ((X0 > 0.5*(D1+D2))? 0.0 : 1.0)"

    gcoef_function_0 = "(X1 < 0.5*(D1-D2))? 0.0 : ((X1 > 0.5*(D1+D2))? 0.0 : U_MAX*(1.0 - 4.0*((X1 - 0.5*D1)*(X1 - 0.5*D1))/(H*H)))"//U_i 
    gcoef_function_1 = "(X1 < 0.5*(D1-D2))? 0.0 : ((X1 > 0.5*(D1+D2))? 0.0 : -U_MAX*(1.0 - 4.0*((X1 - 0.5*D1)*(X1 - 0.5*D1))/(H*H)))"//U_o 
    gcoef_function_2 = "0.0"
    gcoef_function_3 = "0.0"
}

VelocityBcCoefs_1 {

    L = L
    D1 = D1
    D2 = D2
    W = W
    mu = MU
    U_MAX = U_MAX
    H = H

   acoef_function_0 = "1.0" 
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"//(X0 < 0.5*(D1-D2))? 1.0 : ((X0 > 0.5*(D1+D2))? 1.0 : 0.0)"
   acoef_function_3 = "1.0"//(X0 < 0.5*(D1-D2))? 1.0 : ((X0 > 0.5*(D1+D2))? 1.0 : 0.0)"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"//(X0 < 0.5*(D1-D2))? 0.0 : ((X0 > 0.5*(D1+D2))? 0.0 : 1.0)"
   bcoef_function_3 = "0.0"//(X0 < 0.5*(D1-D2))? 0.0 : ((X0 > 0.5*(D1+D2))? 0.0 : 1.0)"

   gcoef_function_0 = "0.0" 
   gcoef_function_1 = "0.0" 
   gcoef_function_2 = "(X0 < 0.5*(D1-D2))? 0.0 : ((X0 > 0.5*(D1+D2))? 0.0 : -U_MAX*(1.0 - 4.0*((X0 - 0.5*D1)*(X0 - 0.5*D1))/(H*H)))"//"0.0"
   gcoef_function_3 = "(X0 < 0.5*(D1-D2))? 0.0 : ((X0 > 0.5*(D1+D2))? 0.0 : U_MAX*(1.0 - 4.0*((X0 - 0.5*D1)*(X0 - 0.5*D1))/(H*H)))"//"0.0"

}
PressureInitialConditions {
D1 = D1
D2 = D2
	function = "0.0"
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }
   largest_patch_size {
      level_0 = PATCH_SIZE, PATCH_SIZE  // all finer levels will use same values as level_0
   }
   smallest_patch_size {
      level_0 =   8, 8  // all finer levels will use same values as level_0
   }
   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
  N=Nx
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [( N/4,N/4 ),( 3*N/4 - 1,N/2 - 1 )],[( N/4,N/2 ),( N/2 - 1,3*N/4 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total     = TRUE
   print_threshold = 0.1
   timer_list      = "IBAMR::*::*","IBTK::*::*","*::*::*"
}

AdvDiffSemiImplicitHierarchyIntegrator {
 start_time = START_TIME
 end_time = END_TIME
 grow_dt = GROW_DT
 num_cycles = ADV_DIFF_NUM_CYCLES
 convective_time_stepping_type = ADV_DIFF_CONVECTIVE_TS_TYPE
 convective_op_type = ADV_DIFF_CONVECTIVE_OP_TYPE
 convective_difference_form = ADV_DIFF_CONVECTIVE_FORM
 cfl = CFL_MAX
 dt_max = DT
 tag_buffer = TAG_BUFFER
 enable_logging = ENABLE_LOGGING
}

// Inlet conditions
TT_XX_i = "1.0"
TT_YY_i = "1.0"
TT_XY_i = "0"
V_i = "0.0"

// Outlet conditions
TT_XX_o = "1.0"
TT_YY_o = "1.0"
TT_XY_o = "1.0"
V_o = "0.0"


ComplexFluid {
InitialConditions{
 function_0 = "1.0"
 function_1 = "1.0"
 function_2 = "0.0"
}
ExtraStressBoundaryConditions_0 {
   D1 = D1
   U_MAX = U_MAX
   W = W
   De = LAMBDA_D*U_MAX/D1
   lambda_d = LAMBDA_D
   mu_t = MU+VISCOSITY
   beta = MU/mu_t
   H = H
   L = L

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "(X1 < 0.5*(D1-D2))? 1.0 : ((X1 > 0.5*(D1+D2))? 1.0 : 2*lambda_d*U_MAX/1.5/H*(1-beta)*(-8*U_MAX*(X1-D1/2)/H/H)^2/72.8+1)"//TT_XX_i
   gcoef_function_1 = "(X1 < 0.5*(D1-D2))? 1.0 : ((X1 > 0.5*(D1+D2))? 1.0 : 2*lambda_d*U_MAX/1.5/H*(1-beta)*(8*U_MAX*(X1-D1/2)/H/H)^2/72.8+1)"//"1.0"
   gcoef_function_2 = "0.0"//"1.0+2*lambda_d*mu_t*(8*U_MAX*(X1-D1/2)/D1/D1)^2"//"0.0"
   gcoef_function_3 = "0.0"//"1.0+2*lambda_d*mu_t*(8*U_MAX*(X1-D1/2)/D1/D1)^2"//"0.0"
}
ExtraStressBoundaryConditions_1 {
   nu = MU/RHO

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "1.0"//TT_YY_i
   gcoef_function_1 = "1.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}
ExtraStressBoundaryConditions_2 {
   D1 = D1
   U_MAX = U_MAX
   W = W
   De = LAMBDA_D*U_MAX/D1
   mu_t = MU + VISCOSITY
   beta = MU/mu_t
   H = H
   L = L
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "(X1 < 0.5*(D1-D2))? 0.0 : ((X1 > 0.5*(D1+D2))? 0.0 : (1-beta)*(-8*U_MAX*(X1-D1/2)/H/H)/72.8)"//TT_XY_i
   gcoef_function_1 = "(X1 < 0.5*(D1-D2))? 0.0 : ((X1 > 0.5*(D1+D2))? 0.0 : (1-beta)*(8*U_MAX*(X1-D1/2)/H/H)/72.8)"//
   gcoef_function_2 = "0.0"//"-mu_t*8*U_MAX*(X1-D1/2)/D1/D1"//"0.0"
   gcoef_function_3 = "0.0"//"-mu_t*8*U_MAX*(X1-D1/2)/D1/D1"//"0.0"
}
 
fluid_model = FLUID_MODEL
conformation_tensor = CONFORMATION_TENSOR
square_root_evolve  = SQUARE_ROOT_EVOLVE
log_conform_evolve  = LOG_CONFORM_EVOLVE
convective_operator_type   = CONVECTIVE_OPERATOR_TYPE
relaxation_time = RELAXATION_TIME
viscosity = VISCOSITY
output_conformation_tensor = OUTPUT_CONFORMATION_TENSOR
output_stress_tensor = OUTPUT_STRESS_TENSOR
log_divergence = TRUE
log_determinant = TRUE
draw_divergence = TRUE
project_conformation_tensor = TRUE
//alpha = ALPHA
lambda_d = LAMBDA_D
lambda_R = LAMBDA_R
beta = BETA_R
delta = DELTA_R
}

