// ---------------------------------------------------------------------
//
// Copyright (c) 2016 - 2020 by the IBAMR developers
// All rights reserved.
//
// This file is part of IBAMR.
//
// IBAMR is free software and is distributed under the 3-clause BSD
// license. The full text of the license can be found in the file
// COPYRIGHT at the top level directory of IBAMR.
//
// ---------------------------------------------------------------------

/////////////////////////////// INCLUDE GUARD ////////////////////////////////

#ifndef included_IBPDForceGen
#define included_IBPDForceGen

/////////////////////////////// INCLUDES /////////////////////////////////////

#include "ibamr/IBLagrangianForceStrategy.h"

#include "ibtk/LData.h"
#include "ibtk/LDataManager.h"

#include "tbox/DescribedClass.h"

#include "Eigen/Dense"

#include <vector>

/////////////////////////////// CLASS DEFINITION /////////////////////////////

namespace IBAMR
{
/*!
 * \brief Class IBPDForceGen is a concrete IBLagrangianForceStrategy that
 * is intended to be used in conjunction with curvilinear mesh data generated by
 * class IBStandardInitializer.
 *
 * Class IBPDForceGen computes peridynamic force between bonds, which eventually
 * gets applied at the IB points.
 */

class IBPDForceGen : public IBAMR::IBLagrangianForceStrategy
{
public:
    /*!
     * \brief Default constructor.
     */
    IBPDForceGen(SAMRAI::tbox::Pointer<SAMRAI::tbox::Database> input_db);

    /*!
     * \brief Deleted copy constructor.
     */
    IBPDForceGen(const IBPDForceGen& from) = delete;

    /*!
     * \brief Deleted assignment operator.
     */
    IBPDForceGen& operator=(const IBPDForceGen& that) = delete;

    /*!
     * \brief Destructor.
     */
    ~IBPDForceGen() = default;

    /*!
     * \brief Lame parameters for default PK1 function.
     */
    static double s_lame_0, s_lame_1;

    /*!
     * \brief Function pointer to compute state based bond forces.
     */
    using BondForceDamageFcnPtr = std::function<Eigen::Vector4d(
        const double horizon,
        const double delta,
        const double W,
        const double vol_frac,
        double* parameters,
        const Eigen::Map<const IBTK::Vector>& X0_mastr,
        const Eigen::Map<const IBTK::Vector>& X0_slave,
        const Eigen::Map<const IBTK::Vector>& X_mastr,
        const Eigen::Map<const IBTK::Vector>& X_slave,
        const Eigen::Map<const Eigen::Matrix<double, NDIM, NDIM, Eigen::RowMajor> >& FF_mastr,
        const Eigen::Map<const Eigen::Matrix<double, NDIM, NDIM, Eigen::RowMajor> >& FF_slave,
        const Eigen::Map<const Eigen::Matrix<double, NDIM, NDIM, Eigen::RowMajor> >& B_mastr,
        const Eigen::Map<const Eigen::Matrix<double, NDIM, NDIM, Eigen::RowMajor> >& B_slave,
        Eigen::Map<IBTK::Vector>& F_mastr,
        Eigen::Map<IBTK::Vector>& F_slave,
        int lag_mastr_node_idx,
        int lag_slave_node_idx)>;

    /*!
     * \brief Function pointer to compute influence of slave idx of a bond based upon
     * its distance from master idx.
     */
    using BondInfluenceFcnPtr = std::function<double(double R0, double delta)>;

    /*!
     * \brief Function pointer to compute volume fraction of slave idx of a bond
     * based upon its distance.
     */
    using BondVolFracFcnPtr = std::function<double(double R0, double horizon, double delta)>;

    /*!
     * \brief Function pointer to define PK1 stress tensor.
     *
     * \NOTE The default PK1 stress tensor corresponds to St-Venant Kirchoff model
     * with Lame's parameters, 0 and 1, defined by static data memebers, s_lame_0 and
     * s_lame_1, respectively.
     */
    using BondPK1FcnPtr =
        std::function<void(Eigen::Matrix<double, NDIM, NDIM, Eigen::RowMajor>& PK1,
                           const Eigen::Map<const Eigen::Matrix<double, NDIM, NDIM, Eigen::RowMajor> >& FF,
                           const Eigen::Map<const IBTK::Vector>& X0,
                           int lag_idx)>;

    /*!
     * \brief Function pointer to define (extra) stress on Target points.
     *
     */
    using TargetPointForceFcnPtr = std::function<void(const Eigen::Map<const IBTK::Vector>& X,
                                                      const Eigen::Map<const IBTK::Vector>& X_target,
                                                      const Eigen::Map<const IBTK::Vector>& U,
                                                      double K,
                                                      double E,
                                                      int lag_idx,
                                                      Eigen::Map<IBTK::Vector>& F)>;
    /*!
     * \brief Register a bond force and damage, influence, volume fraction, PK1 stress
     * specification function with the force generator.
     *
     * These functions are employed to compute the force generated by a
     * particular bond for the specified displacement, PK1 stress tensor, rest
     * length, and Lagrangian index.
     *
     * \NOTE By default, functions default_PK1_fcn(), default_force_damage_fcn(), default_inf_fcn(),
     * and default_vol_frac_fcn() are associated with \a force_fcn_idx 0.
     */
    void registerBondForceSpecificationFunction(int force_fcn_index,
                                                const BondPK1FcnPtr bond_PK1_fcn_ptr,
                                                const BondForceDamageFcnPtr bond_force_damage_fcn_ptr = nullptr,
                                                const BondInfluenceFcnPtr bond_inf_fcn_ptr = nullptr,
                                                const BondVolFracFcnPtr bond_vol_frac_fcn_ptr = nullptr);

    /*!
     * \brief Register target point force function with the force generator.
     *
     * \NOTE By default, default_target_point_force_fcn() is
     */
    void registerTargetPointForceFunction(const TargetPointForceFcnPtr target_point_force_fcn_ptr);

    /*!
     * \brief Setup the data needed to compute the forces on the specified level
     * of the patch hierarchy.
     */
    void initializeLevelData(SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                             int level_number,
                             double init_data_time,
                             bool initial_time,
                             IBTK::LDataManager* l_data_manager) override;
    /*!
     * \brief Compute the force generated by the Lagrangian structure on the
     * specified level of the patch hierarchy and the damage occured during bond
     * breaking.
     *
     * \note Nodal forces computed by this method are \em added to the force
     * vector.
     */
    void computeLagrangianForceAndDamage(SAMRAI::tbox::Pointer<IBTK::LData> F_data,
                                         SAMRAI::tbox::Pointer<IBTK::LData> D_data,
                                         SAMRAI::tbox::Pointer<IBTK::LData> X_data,
                                         SAMRAI::tbox::Pointer<IBTK::LData> U_data,
                                         SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                                         int level_number,
                                         double data_time,
                                         IBTK::LDataManager* l_data_manager);

private:
    /*!
     * \name Horizon and Lagrangian point spacing w.r.t Eulerian mesh spacing.
     */
    double d_horizon = 3.0, d_ds = 1.0;

    /*!
     * \name Data maintained separately for each level of the patch hierarchy.
     */
    //\{
    struct BondData
    {
        std::vector<int> lag_mastr_node_idxs, lag_slave_node_idxs;
        std::vector<int> petsc_mastr_node_idxs, petsc_slave_node_idxs;
        std::vector<int> petsc_global_mastr_node_idxs, petsc_global_slave_node_idxs;
        std::vector<BondForceDamageFcnPtr> force_dmg_fcns;
        std::vector<BondPK1FcnPtr> force_PK1_fcns;
        std::vector<BondInfluenceFcnPtr> force_inf_fcns;
        std::vector<BondVolFracFcnPtr> force_vol_frac_fcns;
        std::vector<double*> parameters;
    };
    std::vector<BondData> d_bond_data;

    struct TargetPointData
    {
        std::vector<int> petsc_node_idxs, petsc_global_node_idxs;
        std::vector<const double*> kappa, eta;
        std::vector<const IBTK::Point*> X0;
    };
    std::vector<TargetPointData> d_target_point_data;

    std::vector<SAMRAI::tbox::Pointer<IBTK::LData> > d_X_ghost_data, d_X0_ghost_data, d_X_mean_ghost_data,
        d_B_ghost_data, d_FF_ghost_data, d_F_ghost_data, d_N_ghost_data, d_dmg_ghost_data, d_dX_data;
    std::vector<bool> d_is_initialized;
    //\}

    /*!
     * PD tensor routines.
     */
    //\{
    bool d_use_mean_disp = false;

    void computeMeanPosition(SAMRAI::tbox::Pointer<IBTK::LData> X_mean_data,
                             SAMRAI::tbox::Pointer<IBTK::LData> N_data,
                             SAMRAI::tbox::Pointer<IBTK::LData> X_data,
                             SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                             int level_number,
                             double data_time,
                             IBTK::LDataManager* l_data_manager);

    void computeShapeTensor(SAMRAI::tbox::Pointer<IBTK::LData> B_data,
                            SAMRAI::tbox::Pointer<IBTK::LData> X0_data,
                            SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                            int level_number,
                            double data_time,
                            IBTK::LDataManager* l_data_manager);

    void computeDeformationGradientTensor(SAMRAI::tbox::Pointer<IBTK::LData> FF_data,
                                          SAMRAI::tbox::Pointer<IBTK::LData> X_data,
                                          SAMRAI::tbox::Pointer<IBTK::LData> X0_data,
                                          SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                                          int level_number,
                                          double data_time,
                                          IBTK::LDataManager* l_data_manager);
    //\}

    /*!
     * Bond force routines and user-defined functions.
     */
    //\{
    void initializeBondLevelData(std::set<int>& nonlocal_petsc_idx_set,
                                 SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                                 int level_number,
                                 double init_data_time,
                                 bool initial_time,
                                 IBTK::LDataManager* l_data_manager);

    void computeLagrangianBondForceAndDamage(SAMRAI::tbox::Pointer<IBTK::LData> F_data,
                                             SAMRAI::tbox::Pointer<IBTK::LData> D_data,
                                             SAMRAI::tbox::Pointer<IBTK::LData> X_data,
                                             SAMRAI::tbox::Pointer<IBTK::LData> X0_data,
                                             SAMRAI::tbox::Pointer<IBTK::LData> FF_data,
                                             SAMRAI::tbox::Pointer<IBTK::LData> B_data,
                                             SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                                             int level_number,
                                             double data_time,
                                             IBTK::LDataManager* l_data_manager);

    std::map<int, BondForceDamageFcnPtr> d_bond_force_damage_fcn_map;
    std::map<int, BondInfluenceFcnPtr> d_bond_inf_fcn_map;
    std::map<int, BondVolFracFcnPtr> d_bond_vol_frac_fcn_map;
    std::map<int, BondPK1FcnPtr> d_bond_PK1_fcn_map;
    //\}

    /*!
     * TargetPoint force routines.
     */
    //\{
    void initializeTargetPointLevelData(std::set<int>& nonlocal_petsc_idx_set,
                                        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                                        int level_number,
                                        double init_data_time,
                                        bool initial_time,
                                        IBTK::LDataManager* l_data_manager);

    void computeLagrangianTargetPointForce(SAMRAI::tbox::Pointer<IBTK::LData> F_data,
                                           SAMRAI::tbox::Pointer<IBTK::LData> X_data,
                                           SAMRAI::tbox::Pointer<IBTK::LData> U_data,
                                           SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
                                           int level_number,
                                           double data_time,
                                           IBTK::LDataManager* l_data_manager);

    TargetPointForceFcnPtr d_target_point_force_fcn;
    //\}
};
} // namespace IBAMR

//////////////////////////////////////////////////////////////////////////////

#endif // #ifndef included_IBPDForceGen
